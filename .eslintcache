[{"/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/index.js":"1","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/App.js":"2","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/DemoPanel.jsx":"3","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/HelpPanel.jsx":"4","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/NumberSettingsPanel.jsx":"5","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/ItemSettingsPanel.jsx":"6","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/ParentSettingsPanel.jsx":"7","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/Checkbox.jsx":"8","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/Button.jsx":"9","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/DropdownList.jsx":"10","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/InputField.jsx":"11","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/dataForElements.js":"12","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/ActionBox.jsx":"13","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/AxisDirections.jsx":"14"},{"size":220,"mtime":1610016288026,"results":"15","hashOfConfig":"16"},{"size":9296,"mtime":1610631437877,"results":"17","hashOfConfig":"16"},{"size":3057,"mtime":1610625931997,"results":"18","hashOfConfig":"16"},{"size":1140,"mtime":1610628694121,"results":"19","hashOfConfig":"16"},{"size":1886,"mtime":1610629343507,"results":"20","hashOfConfig":"16"},{"size":3944,"mtime":1610631571389,"results":"21","hashOfConfig":"16"},{"size":2599,"mtime":1610631698044,"results":"22","hashOfConfig":"16"},{"size":903,"mtime":1610628906273,"results":"23","hashOfConfig":"16"},{"size":1594,"mtime":1610631523913,"results":"24","hashOfConfig":"16"},{"size":2806,"mtime":1610631548413,"results":"25","hashOfConfig":"16"},{"size":2003,"mtime":1610630315457,"results":"26","hashOfConfig":"16"},{"size":10718,"mtime":1610622133330,"results":"27","hashOfConfig":"16"},{"size":6089,"mtime":1610567421446,"results":"28","hashOfConfig":"16"},{"size":1903,"mtime":1610628012020,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1o7p85o",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/index.js",[],["64","65"],"/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/App.js",[],"/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/DemoPanel.jsx",["66"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport ActionBox from \"./ActionBox\";\nimport { uniqueIdentifiers } from \"./dataForElements\";\n\nconst DemoPanel = ({\n  //received PROPS from App.js\n  id,\n  elementsOnDemoPanel, //number of actionBoxes(colored box-like elements with big letters) to show on the panel\n  //PARENT DIV SETTINGS\n  currentFlexDirection,\n  currentFlexWrap,\n  currentJustifyContent,\n  currentAlignItems,\n  currentAlignContent,\n  //ACTION BOX SETTINGS\n  clickedBoxID, setclickedBoxID, setComputedActionBoxBgrColor,\n  setComputedOrder, newOrder, setNewOrder,\n  setComputedAlignSelf,newAlignSelf,setNewAlignSelf,\n  setComputedFlexGrow,newFlexGrow,setNewFlexGrow,\n  setComputedFlexShrink,newFlexShrink,setNewFlexShrink,\n  setComputedFlexBasis,newFlexBasis,setNewFlexBasis\n}) => {\n  /*\n  NUMBER OF ACTIONBOXES based on user setting with plus/minus buttons\n  selecting as many letters from the string 'showOnlyThisMuchItems' as many items the user wants to see;\n  the letters will serve as unique ID-s*/\n  const showOnlyThisMuchItems = Array.from(\n    uniqueIdentifiers.slice(0, elementsOnDemoPanel)\n  );\n\n  /*\n  PARENT CONTAINER Flexbox style settings; \n  these are all PARENT CONTAINER Flexbox settings!\n  the parentComponentFlexboxSettings variable will be used in inline styling with Object.assign() FN*/\n  const receivedParentComponentStyle = {\n    flexDirection: currentFlexDirection,\n    flexWrap: currentFlexWrap,\n    justifyContent: currentJustifyContent,\n    alignItems: currentAlignItems,\n    alignContent: currentAlignContent,\n  };\n\n  //creating css settings for the active actionBox\n  const clickedActionBoxFlexboxSettings = {};\n\n  /*creating as many rendered colored actionBoxes as much the user wants; \n  each has a unique letter to make identifying easy*/\n  const asManyNumberOfActionBoxesUserWantsToSee = showOnlyThisMuchItems.map(\n    (letter) => {\n      return <ActionBox key={letter} letter={letter} clickedBoxID={clickedBoxID} setclickedBoxID={setclickedBoxID} setComputedActionBoxBgrColor={setComputedActionBoxBgrColor} setComputedOrder={setComputedOrder} newOrder={newOrder} setNewOrder={setNewOrder} setComputedAlignSelf={setComputedAlignSelf} newAlignSelf={newAlignSelf} setNewAlignSelf={setNewAlignSelf} setComputedFlexGrow={setComputedFlexGrow} newFlexGrow={newFlexGrow} setNewFlexGrow={setNewFlexGrow} setComputedFlexShrink={setComputedFlexShrink} newFlexShrink={newFlexShrink} setNewFlexShrink={setNewFlexShrink} setComputedFlexBasis={setComputedFlexBasis} newFlexBasis={newFlexBasis} setNewFlexBasis={setNewFlexBasis}/>;\n    }\n  );\n\n  //COMPONENT RETURN STATEMENT\n  return (\n    <StyledDemoPanel id={id} className=\"panel\" style={receivedParentComponentStyle}>\n      {asManyNumberOfActionBoxesUserWantsToSee}\n    </StyledDemoPanel>\n  );\n};\nexport default DemoPanel;\nconst StyledDemoPanel=styled.div`\ndisplay: flex;\noverflow: hidden;\npadding-left: 2vw;\ngrid-row: 1/4;\ngrid-column: 3;\nbackground-color: var(--clr-paint2);\nbackground-image: linear-gradient(to left, white, var(--clr-paint2) 10%);\n`","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/HelpPanel.jsx",[],"/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/NumberSettingsPanel.jsx",["67"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"./Button\";\nimport { numberOfElementsToStartWith } from \"./dataForElements\"; //initial value: 5 - this many actionBoxes are present initially\n\n/*the purpose of this component is to hold 2 buttons to modify the number of the elements on the right side.\nWith these buttons the user can change the number of the elements to be seen on screen. All those\nelements have alphabetical id;\nthere is an upper limit how many elements can be added; in Button.jsx the btnPlus imports uniqueIdentifiers.length to determine the maximum number*/\n\nconst NumberSettingsPanel = ({ id, title, setElementsOnDemoPanel }) => {\n  const [numberOfItems, setNumberOfItems] = useState(\n    numberOfElementsToStartWith\n  ); //to track how many colored boxes exist on the right panel\n  useEffect(() => {\n    setElementsOnDemoPanel(numberOfItems);\n  }, [numberOfItems]);\n  return (\n    <StyledNumberSettingsPanel id={id} className=\"panel\">\n      <StyledH3>{title}</StyledH3>\n      <Button\n        id={\"btnMinus\"}\n        text=\"-\"\n        numberOfItems={numberOfItems}\n        setNumberOfItems={setNumberOfItems}\n      />\n      <StyledLabel id=\"plusMinusLabel\">{numberOfItems} </StyledLabel>\n      <Button\n        id={\"btnPlus\"}\n        text=\"+\"\n        numberOfItems={numberOfItems}\n        setNumberOfItems={setNumberOfItems}\n      />\n    </StyledNumberSettingsPanel>\n  );\n};\nexport default NumberSettingsPanel;\n\n//styled component settings\nconst StyledNumberSettingsPanel = styled.div`\n  grid-row: 1;\n  grid-column: 2;\n  background-color: var(--clr-base1);\n  grid-template-columns: 20% auto;\n  grid-template-rows: repeat(3, 1fr);\n`;\nconst StyledLabel = styled.label`\n  width: 30%;\n  margin: auto;\n  font-size: 1.5rem;\n  transform: scale(2);\n`;\nconst StyledH3=styled.h3`\ngrid-row: 1/4;\ngrid-column: 1;\n`;\n","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/ItemSettingsPanel.jsx",[],"/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/ParentSettingsPanel.jsx",[],"/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/Checkbox.jsx",["68"],"import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\n/*the only parent component is the HelpPanel.jsx*/\n\nconst CheckBox = ({ id, text, valueToToggle, actionToDo}) => {\n  const [checked, setChecked]=useState(false);\n\n  //handling changeEvent on checkbox\n  const onChangeHandler=()=>{\n    setChecked(!checked);\n    actionToDo(!valueToToggle); \n  };\n\n  return (\n    <StyledDiv>\n      <StyledInput type=\"checkbox\" id={id} checked={checked} onChange={onChangeHandler} />\n      <StyledLabel htmlFor={id}>{text}</StyledLabel>\n      </StyledDiv>\n  );\n};\nexport default CheckBox;\n\n//styled component settings\nconst StyledDiv = styled.div`\n  margin-top: auto;\n  margin-bottom: auto;\n  &:hover label{\n    transform:scale(1.05)\n  }\n`;\nconst StyledLabel=styled.label`\ntransition:500ms;\nfloat: right;\nwidth: 100%;\n`;\nconst StyledInput=styled.input`\ntransform: scale(1.7);\n`;\n\n\n","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/Button.jsx",[],"/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/DropdownList.jsx",["69","70","71"],"/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/InputField.jsx",["72","73","74"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst InputFiled = ({\n  ///INCOMING PROPS\n  id,\n  min,\n  defaultVal,//min nem minden esetben egyezik meg a defaultVal ertekevel\n  text,\n  type,\n  clickedBoxID,\n  receivedData,\n  actionToDo,\n  resetAllActionBoxSettings,\n  glowSwitch\n  \n}) => {\n  //STATE values\n  const [valueToShow, setValueToShow] = useState(defaultVal); //this is what appears in the inputfiled\n  const [glow, setGlow]=useState(null);\n\n  //ON CHANGE HANDLER\n  const onChangeHandler = (e) => {\n    setValueToShow(e.target.value); //show the new value in the inputfiled as a visual feedback\n    // actionToDo(e.target.value);//send the user provided value to the actionbox so it`s css can be modified accordingly\n  };\n  useEffect(()=>{actionToDo(valueToShow)},[valueToShow])\n  //USEFFECT\n  useEffect(() => {\n    setValueToShow(receivedData); //if the user clicks on a new actionBox, update the inputfield with the current actionbox css styling\n  }, [\n    clickedBoxID,\n  ]); /*the inputfield should be updated if\n      there was a different actionbox clicked or the user typed in something into the inputfield*/\n  /*if inputfiled text has changed, but not because the was a click on a different actionbox,\n      but because the user typed new data, send the update to demopanel to change the actionbox styling*/\n  useEffect(()=>{setValueToShow(defaultVal)},[resetAllActionBoxSettings])\n  useEffect(()=>{\n    setGlow(glowSwitch?'0 0 21px 1px black':null)\n  },[glowSwitch]);\n\n  //COMPONENT RETURN\n  return (\n    <StyledInputContainer>\n      <label htmlFor={id}>{text}: </label>\n      <input\n        id={id}\n        type={type}\n        spellCheck=\"false\"\n        name={id}\n        value={valueToShow}\n        min={min}\n        onChange={onChangeHandler}\n        style={{boxShadow:glow}}\n      />\n    </StyledInputContainer>\n  );\n};\nexport default InputFiled;\n\nconst StyledInputContainer=styled.div`\ndisplay: flex;\njustify-content: space-between;\n`","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/dataForElements.js",[],"/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/ActionBox.jsx",["75","76","77","78","79"],"//COMPONENT DOCUMENTATION BELOW\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst ActionBox = ({\n  //INCOMING PROPS\n\n  letter,\n  clickedBoxID,\n  setclickedBoxID,\n  setComputedActionBoxBgrColor,\n  setComputedOrder,\n  newOrder,\n  setNewOrder,\n  setComputedAlignSelf,\n  newAlignSelf,\n  setNewAlignSelf,\n  setComputedFlexGrow,\n  newFlexGrow,\n  setNewFlexGrow,\n  setComputedFlexShrink,\n  newFlexShrink,\n  setNewFlexShrink,\n  setComputedFlexBasis,\n  newFlexBasis,\n  setNewFlexBasis\n\n}) => {\n  //STATE values\n\n  const [appliedOrder, setAppliedOrder] = useState('1');\n  const [appliedAlignSelf, setAppliedAlignSelf] = useState('auto');\n  const [appliedFlexGrow, setAppliedFlexGrow]=useState('0');\n  const [appliedFlexShrink, setAppliedFlexShrink]=useState('1');\n  const [appliedFlexBasis, setAppliedFlexBasis]=useState('auto');\n\n  //USEFFECTS\n\n  useEffect(() => {\n    //usefect#1 to update inputfield with current Order value\n    if (letter === clickedBoxID) {\n      setAppliedOrder(newOrder);\n    }\n  }, [newOrder, clickedBoxID]);\n\n  useEffect(() => {\n    //usefect#2 to update dropdown with current Align Self value\n    if (letter === clickedBoxID) {\n      setAppliedAlignSelf(newAlignSelf);\n    }\n  }, [newAlignSelf, clickedBoxID]);\n\n  useEffect(() => {\n    //usefect#3 to update inputfield with current Flex Grow value\n    if (letter === clickedBoxID) {\n      setAppliedFlexGrow(newFlexGrow);\n    }\n  }, [newFlexGrow, clickedBoxID]);\n\n  useEffect(() => {\n    //usefect#4 to update inputfield with current Flex Shrink value\n    if (letter === clickedBoxID) {\n      setAppliedFlexShrink(newFlexShrink);\n    }\n  }, [newFlexShrink, clickedBoxID]);\n\n  useEffect(() => {\n    //usefect#5 to update inputfield with current Flex Basis value\n    if (letter === clickedBoxID) {\n      setAppliedFlexBasis(newFlexBasis);\n    }\n  }, [newFlexBasis, clickedBoxID]);\n\n  //HANDLE CLICK EVENT\n\n  const handleClick = (e) => {\n    // console.log('handleClick')\n    const currentActionBoxStylings = window.getComputedStyle(e.target, null); //read current value\n    setclickedBoxID(letter);\n    setComputedActionBoxBgrColor(currentActionBoxStylings.backgroundColor);\n    setNewOrder(currentActionBoxStylings.order); //clear previous setting and update with current one\n    setComputedOrder(currentActionBoxStylings.order); //sent the currently read value to dropdown list\n\n    setNewAlignSelf(currentActionBoxStylings.alignSelf);\n    setComputedAlignSelf(currentActionBoxStylings.alignSelf);\n    \n    setNewFlexGrow(currentActionBoxStylings.flexGrow);\n    setComputedFlexGrow(currentActionBoxStylings.flexGrow)\n    \n    setNewFlexShrink(currentActionBoxStylings.flexShrink);\n    setComputedFlexShrink(currentActionBoxStylings.flexShrink)\n\n    setNewFlexBasis(currentActionBoxStylings.flexBasis);\n    setComputedFlexBasis(currentActionBoxStylings.flexBasis)\n  };\n\n  //COMPONENT RETURN\n\n  return (\n    <StyledActionDiv\n      onClick={handleClick}\n      style={{ order: appliedOrder, alignSelf: appliedAlignSelf, flexGrow: appliedFlexGrow, flexShrink: appliedFlexShrink, flexBasis: appliedFlexBasis }}\n    >\n      {letter}\n    </StyledActionDiv>\n  );\n};\nexport default ActionBox;\n\n//STYLING\n\nconst StyledActionDiv = styled.div`\n  order: 1;\n  margin: 3px;\n  border-radius: 7%;\n  box-shadow: 5px 10px rgba(25, 25, 112, 0.562);\n  font-weight: 700;\n  font-size: 10vmin;\n  color: var(--clr-paint2);\n  text-align: center;\n  text-shadow: var(--text-shadow);\n  width: auto;\n\n  &:nth-of-type(3n + 0) {\n    background-color: var(--clr-paint5);\n    border: 2px solid var(--clr-paint4);\n    border-bottom: 4px solid var(--clr-paint4);\n  }\n  &:nth-of-type(3n + 1) {\n    background-color: var(--clr-paint3);\n    border: 2px solid var(--clr-paint4);\n    border-bottom: 4px solid var(--clr-paint4);\n  }\n  &:nth-of-type(3n + 2) {\n    background-color: var(--clr-paint4);\n    border: 2px solid var(--clr-paint4);\n    border-bottom: 4px solid var(--clr-paint4);\n  }\n`;\n\n/*COMPONENT DOCUMENTATION\n\nActionBoxes- these are the colored boxes on the right side with big letters on them, acting as unique IDs.\n\nit`s Parent Component: DemoPanel.jsx;\nit`s Child Component(s): none;\nfunctionality: the actionboxes create the visual representation of all the Flexbbox css changes the user make on the two setting panels.\ntheir number can be modified with the big plus/minus buttons, also their current number is visible next to these buttons\n\nstates:\nappliedOrder-this value will update the css order setting ONLY of the currently selected actionBox (so not all of them, just one!)\n\nreceived props:\nletter -unique id for every box, this is what the user can see on them as big capital letter\nclickedBoxID- the letter on the CLICKED actionBox\nsetclickedBoxID-the ability to change the clickedBoxID when the user clicks on a new actionBox\nsetComputedOrder- to read the current css settings for the order property and send it thru to App>ItemSettingSpanel>InputField\nnewOrder-the new order value set by the user on the InputField of the ItemSettingsPanel; this value will update the currently selected actionBox settings\nsetNewOrder-the main action happens in the ItemSettingsPanel, but I had to use it here, too, to clear possible previous value,\nand update with the currently selected actionBox setting; without that at the new click the new actionBox would be updated with the previous value\n\nuseEffects:\nwhen rendering all the actionBoxes, out of the many boxes on the screen, if the actionBox ID is equal to the clicked actionBox id,\nchange that and only that setting for the clicked actionBox with user set data ( which is received from the ItemSettingsPanel thru prop system via App.js)\n\nhandleClick:\nwhen clicking on any actionbox, read the current css settings, clear/update previous incoming information, and sent the currently read information to \nItemSettingsPanel to display it for the user\n\nstyle:\ninline styling reserved for the dynamic values - those ones the user can modify on ItemSettingsPanel\nstyled component- all the rest css styling\napplied css variables are set in index.css\n*/\n","/home/lajos/JavaScript/Javascript projects/visualFlexbox_v2101/visualflexbox_react/src/components/AxisDirections.jsx",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":45,"column":9,"nodeType":"86","messageId":"87","endLine":45,"endColumn":40},{"ruleId":"88","severity":1,"message":"89","line":17,"column":6,"nodeType":"90","endLine":17,"endColumn":21,"suggestions":"91"},{"ruleId":"84","severity":1,"message":"92","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":26},{"ruleId":"88","severity":1,"message":"93","line":21,"column":6,"nodeType":"90","endLine":21,"endColumn":20,"suggestions":"94"},{"ruleId":"88","severity":1,"message":"95","line":25,"column":5,"nodeType":"90","endLine":25,"endColumn":29,"suggestions":"96"},{"ruleId":"88","severity":1,"message":"95","line":29,"column":5,"nodeType":"90","endLine":29,"endColumn":32,"suggestions":"97"},{"ruleId":"88","severity":1,"message":"98","line":27,"column":43,"nodeType":"90","endLine":27,"endColumn":56,"suggestions":"99"},{"ruleId":"88","severity":1,"message":"93","line":31,"column":6,"nodeType":"90","endLine":33,"endColumn":4,"suggestions":"100"},{"ruleId":"88","severity":1,"message":"101","line":37,"column":46,"nodeType":"90","endLine":37,"endColumn":73,"suggestions":"102"},{"ruleId":"88","severity":1,"message":"103","line":44,"column":6,"nodeType":"90","endLine":44,"endColumn":30,"suggestions":"104"},{"ruleId":"88","severity":1,"message":"103","line":51,"column":6,"nodeType":"90","endLine":51,"endColumn":34,"suggestions":"105"},{"ruleId":"88","severity":1,"message":"103","line":58,"column":6,"nodeType":"90","endLine":58,"endColumn":33,"suggestions":"106"},{"ruleId":"88","severity":1,"message":"103","line":65,"column":6,"nodeType":"90","endLine":65,"endColumn":35,"suggestions":"107"},{"ruleId":"88","severity":1,"message":"103","line":72,"column":6,"nodeType":"90","endLine":72,"endColumn":34,"suggestions":"108"},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'clickedActionBoxFlexboxSettings' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setElementsOnDemoPanel'. Either include it or remove the dependency array. If 'setElementsOnDemoPanel' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["111"],"'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'receivedData'. Either include it or remove the dependency array. If 'setValueToShow' needs the current value of 'receivedData', you can also switch to useReducer instead of useState and read 'receivedData' in the reducer.",["112"],"React Hook useEffect has missing dependencies: 'actionToDo' and 'dropdownData.options'. Either include them or remove the dependency array. If 'actionToDo' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["113"],["114"],"React Hook useEffect has a missing dependency: 'actionToDo'. Either include it or remove the dependency array. If 'actionToDo' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["115"],["116"],"React Hook useEffect has a missing dependency: 'defaultVal'. Either include it or remove the dependency array. If 'setValueToShow' needs the current value of 'defaultVal', you can also switch to useReducer instead of useState and read 'defaultVal' in the reducer.",["117"],"React Hook useEffect has a missing dependency: 'letter'. Either include it or remove the dependency array.",["118"],["119"],["120"],["121"],["122"],"no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"125","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [numberOfItems, setElementsOnDemoPanel]",{"range":"146","text":"147"},"Update the dependencies array to be: [clickedBoxID, receivedData]",{"range":"148","text":"149"},"Update the dependencies array to be: [actionToDo, dropdownData.options, resetAllParentSettings]",{"range":"150","text":"151"},"Update the dependencies array to be: [actionToDo, dropdownData.options, resetAllActionBoxSettings]",{"range":"152","text":"153"},"Update the dependencies array to be: [actionToDo, valueToShow]",{"range":"154","text":"155"},{"range":"156","text":"149"},"Update the dependencies array to be: [defaultVal, resetAllActionBoxSettings]",{"range":"157","text":"158"},"Update the dependencies array to be: [newOrder, clickedBoxID, letter]",{"range":"159","text":"160"},"Update the dependencies array to be: [newAlignSelf, clickedBoxID, letter]",{"range":"161","text":"162"},"Update the dependencies array to be: [newFlexGrow, clickedBoxID, letter]",{"range":"163","text":"164"},"Update the dependencies array to be: [newFlexShrink, clickedBoxID, letter]",{"range":"165","text":"166"},"Update the dependencies array to be: [newFlexBasis, clickedBoxID, letter]",{"range":"167","text":"168"},[933,948],"[numberOfItems, setElementsOnDemoPanel]",[581,595],"[clickedBoxID, receivedData]",[706,730],"[actionToDo, dropdownData.options, resetAllParentSettings]",[841,868],"[actionToDo, dropdownData.options, resetAllActionBoxSettings]",[819,832],"[actionToDo, valueToShow]",[1008,1031],[1416,1443],"[defaultVal, resetAllActionBoxSettings]",[1046,1070],"[newOrder, clickedBoxID, letter]",[1246,1274],"[newAlignSelf, clickedBoxID, letter]",[1449,1476],"[newFlexGrow, clickedBoxID, letter]",[1657,1686],"[newFlexShrink, clickedBoxID, letter]",[1864,1892],"[newFlexBasis, clickedBoxID, letter]"]